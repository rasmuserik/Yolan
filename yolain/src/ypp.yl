[def macros [new object]]

[def onEach [new array]]

[exports set 'transform
  [fn [node]
    [set node
      [onEach reduce
        [fn [acc obj] [[obj get 'transform] call null acc]]
        node]]
    [if-else [macros get [node get 0]]
      [set node [[[macros get [node get 0]] get 'transform] call null node]]]
    node]]

[exports set 'reverse
  [fn [node]
    [set node
      [[onEach reverse] reduce
        [fn [acc obj] [[obj get 'reverse] call null acc]]
        node]]
    [set node
      [[onEach get [[Object keys onEach] reverse]] reduce
        [fn [acc obj] [[obj get 'reverse] call null acc]]
        node]]
    node]]

[macros set 'if
  [new object
    ['transform
      [fn [node] [new array 'if-else ['[do] concat [node slice 1]]]]]
    ['reverse
      [fn [node]
        [if-else [[[node get 0] == 'if-else] and [[node get 'length] == 2]]
          [do
            [if-else [[[node get 1] get 0] == 'do]
              [return ['[if] slice [[[node get 1] get 0] slice 1]]]
              [return [new array 'if [node get 1]]]]]]
        node]]]]