[exports set 'tokenize
  [fn [str]
    [def result [new array]]
    [def i 0]
    [def tokeniser [new object]]
    [def c [str get 0]]
    [def nextc [fn [] [set i [i + 1]] [set c [str get i]] c]]
    [def isWs [fn [] [[c == '\ ] or [c == '\n] [c == '\r] [c == '\t]]]]
    [def isBracket [fn [] [[c == '\[] or [c == '\]]]]]
    [while c
      [while [isWs call] [nextc call]]
      [if-else [c == '\[]
        [do [result push lbracket] [nextc call]]
        [if-else [c == '\]]
          [do [result push rbracket] [nextc call]]
          [if-else [c == '\']
            [do [result push quote] [nextc call]]
            [do [def symb ""]
              [while [c and [[isWs call] fails] [[isBracket call] fails]]
                [if-else [c == '\\]
                  [do [nextc call]
                    [if-else
                      [[[isWs call] or [isBracket call] [c == '\']] fails]
                      [set symb [symb + '\\]]]]]
                [if-else [c == '"] [set symb [symb + '\\]]]
                [set symb [symb + c]]
                [nextc call]]
              [result push symb]]]]]]
    [if-else [[[result get [[result get 'length] - 1]] get 'length] == 0]
      [result pop]]
    result]]

[def quote [new object ['quote true]]]

[def lbracket [new object ['lbracket true]]]

[def rbracket [new object ['rbracket true]]]

[def addQuotes
  [fn [list]
    [def i 0]
    [def result [new array]]
    [while [i < [list get 'length]]
      [def elem [list get i]]
      [if-else [elem == quote]
        [do [set i [i + 1]] [set elem [new array 'quote [list get i]]]]]
      [result push elem]
      [set i [i + 1]]]
    result]]

[exports set 'parse
  [fn [tokens]
    [set tokens [tokens reverse]]
    [def stack [new array]]
    [def current [new array 'do]]
    [while [tokens get 'length]
      [def token [tokens pop]]
      [if-else [token == lbracket]
        [do [stack push current] [set current [new array]]]
        [if-else [token == rbracket]
          [do [def t current]
            [set current [stack pop]]
            [current push [addQuotes call null t]]]
          [if-else [token == quote]
            [current push quote]
            [current push [JSON parse ['" + token '"]]]]]]]
    current]]

[exports set 'nspace
  [fn [n]
    [def result [new array]]
    [while [0 < n] [set n [n - 1]] [result push '\ ]]
    [result join ""]]]

[def indent 0]

[def screenWidth 78]

[def indentStep 2]

[def escapeRegEx [RegExp call RegExp '\[\'\ \\\[\\\]\] 'g]]

[def escapeRegEx2 [RegExp call RegExp '\\\\" 'g]]

[exports set 'prettyprint
  [fn [ast]
    [if-else [[ast jsType] == 'string]
      [return
        [[[[JSON stringify ast] slice 1 -1] replace escapeRegEx
            [fn [s] ['\\ + s]]]
          replace escapeRegEx2 '"]]]
    [if-else [[2 == [ast get 'length]] and ['quote == [ast get 0]]]
      [return ['\' + [exports prettyprint [ast get 1]]]]]
    [if-else [0 == [ast get 'length]] [return '\[\]]]
    [set indent [indent + indentStep]]
    [def pos indent]
    [set strs [ast map [exports get 'prettyprint]]]
    [if-else [[pos + [[strs join] get 'length] 1] < screenWidth]
      [do [set indent [indent - indentStep]]
        [return ['\[ + [strs join '\ ] '\]]]]]
    [def space ['\n + [exports nspace indent]]]
    [def result [new array]]
    [result push '\[]
    [result push [strs get 0]]
    [set pos [pos + [[strs get 0] get 'length] 1]]
    [def i 1]
    [def forceNewLine false]
    [def currentIsString true]
    [while [i < [ast get 'length]]
      [def prevIsString currentIsString]
      [set currentIsString
        [[[[ast get i] jsType] == 'string] or
          ['quote == [[ast get i] get 0]]]]
      [set forceNewLine false]
      [if-else [[prevIsString fails] or [currentIsString fails]]
        [set forceNewLine true]]
      [if-else [i < 2] [set forceNewLine false]]
      [def prevIsString currentIsString]
      [result push '\ ]
      [if-else
        [forceNewLine or [screenWidth < [pos + [[strs get i] get 'length]]]]
        [do [result pop] [result push space] [set pos indent]]]
      [result push [strs get i]]
      [set pos [pos + [[strs get i] get 'length] 1]]
      [set i [i + 1]]]
    [result push '\]]
    [set indent [indent - indentStep]]
    [result join ""]]]