[exports set 'toIL
  [fn [ast]
    [def functions '[]]
    [def fnid 0]
    [def compileFunction
      [fn [name args ast]
        [def locals '[]]
        [def globals '[]]
        [def consts '[]]
        [def currentFunction '[]]
        [def compileExpression
          [fn [expr withArg]
            [def code '[]]
            [if [Array isArray expr]
              [do [def first [expr get 0]]
                [if [first == '#]
                  [return [compileExpression call null 'undefined withArg]]]
                [if [first == 'set]
                  [do
                    [set code
                      [code concat
                        [compileExpression call null [expr get 2] true]]]
                    [code push [new array 'setLocal [expr get 1]]]
                    [if [withArg fails] [code push '[pop]]]
                    [return code]]]
                [if [first == 'def]
                  [do [locals push [expr get 1]]
                    [set code
                      [code concat
                        [compileExpression call null [expr get 2] true]]]
                    [code push [new array 'setLocal [expr get 1]]]
                    [if [withArg fails] [code push '[pop]]]
                    [return code]]]
                [if [first == 'if]
                  [do [def result '[if]]
                    [result push
                      [compileExpression call null [expr get 1] true]]
                    [result push
                      [compileExpression call null [expr get 2] withArg]]
                    [result push
                      [compileExpression call null [expr get 3] withArg]]
                    [code push result]
                    [return code]]]
                [if [first == 'fn]
                  [do [def id ['_ + fnid]]
                    [set fnid [fnid + 1]]
                    [functions push
                      [compileFunction call null id
                        [expr get 1]
                        ['[do] concat [expr slice 2]]]]
                    [return [new array [new array 'fn id]]]]]
                [if [first == 'do]
                  [do [def i 1]
                    [def length [expr get 'length]]
                    [while [i < length]
                      [set code
                        [code concat
                          [compileExpression call null
                            [expr get i]
                            [[i == [length - 1]] and withArg]]]]
                      [set i [i + 1]]]
                    [return code]]]
                [if true
                  [do [def method [expr get 1]]
                    [set expr [expr slice 1]]
                    [expr set 0 first]
                    [def types [expr map [fn [] 'var]]]
                    [while [0 < [expr get 'length]]
                      [set code
                        [code concat
                          [compileExpression call null [expr pop] true]]]]
                    [def invokeExpr '[invoke]]
                    [invokeExpr push method]
                    [set invokeExpr [invokeExpr concat types]]
                    [code push invokeExpr]
                    [if [withArg fails] [code push '[pop]]]
                    [return code]]]]]
            [if [withArg fails] [return '[]]]
            [# look up var]
            [set op 'getVar]
            [set id expr]
            [set code [new array [new array op id]]]
            code]]
        [def code [compileExpression call null [ast slice 0] true]]
        [code push '[return]]
        [currentFunction push [new array 'id name]]
        [currentFunction push [new array 'args args]]
        [currentFunction push [new array 'locals locals]]
        [currentFunction push [new array 'globals globals]]
        [currentFunction push [new array 'consts consts]]
        [currentFunction push [new array 'code code]]
        currentFunction]]
    [functions push [compileFunction call null 'entry '[] ast]]
    functions]]