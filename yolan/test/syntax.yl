[def tokenRegEx
  [RegExp call RegExp
    '\\\\s*(\\\\\[|\\\\\]|(\\\\\\\\.|\[^\\\\s\\\\\[\\\\\]\])+)' 'g']]

[def unescapeRegEx [RegExp call RegExp '\\\\\\\\(.)' 'g']]

[def escapeRegEx
  [RegExp call RegExp '\[\\\\\\\\\\\\\[\\\\\]\ \\\\n\\\\r\]' 'g']]

[exports set tokenize
  [fn [str]
    [def result [array]]
    [str replace tokenRegEx [fn [_ token] [result push token]]]
    result]]

[exports set parse
  [fn [tokens]
    [set tokens [tokens reverse]]
    [def stack [array]]
    [def current [array 'do']]
    [while [tokens get 'length']
      [def token [tokens pop]]
      [cond [[eq? token '\['] [stack push current] [set current [array]]]
        [[eq? token '\]'] [def t current]
          [set current [stack pop]]
          [current push t]]
        [true [current push [token replace unescapeRegEx [fn [_ a] a]]]]]]
    current]]

[exports set nspace
  [fn [n]
    [def result [array]]
    [while [< 0 n] [set n [- n 1]] [result push '\ ']]
    [result join '']]]

[def indent 0]

[def screenWidth 78]

[def indentStep 2]

[exports set prettyprint
  [fn [ast]
    [if [eq? [JsTypeOf ast] 'string']
      [return [ast replace escapeRegEx [fn [s] [+ '\\\\' s]]]]]
    [if [eq? 0 [ast get 'length']] [return '\[\]']]
    [set indent [+ indent indentStep]]
    [def pos indent]
    [set strs [ast map [exports get 'prettyprint']]]
    [if [< [+ pos [[strs join] get 'length'] 1] screenWidth]
      [set indent [- indent indentStep]]
      [return [+ '\[' [strs join '\ '] '\]']]]
    [def space [+ '\\n' [exports nspace indent]]]
    [def result [array]]
    [result push '\[']
    [result push [strs get 0]]
    [set pos [+ pos [[strs get 0] get 'length'] 1]]
    [def i 1]
    [def forceNewLine false]
    [def currentIsString true]
    [while [< i [ast get 'length']]
      [def prevIsString currentIsString]
      [set currentIsString [eq? [JsTypeOf [ast get i]] 'string']]
      [set forceNewLine false]
      [if [or [not prevIsString] [not currentIsString]]
        [set forceNewLine true]]
      [if [< i 2] [set forceNewLine false]]
      [def prevIsString currentIsString]
      [result push '\ ']
      [if
        [or forceNewLine
          [< screenWidth [+ pos [[strs get i] get 'length']]]]
        [result pop]
        [result push space]
        [set pos indent]]
      [result push [strs get i]]
      [set pos [+ pos [[strs get i] get 'length'] 1]]
      [set i [+ i 1]]]
    [result push '\]']
    [set indent [- indent indentStep]]
    [result join '']]]
