[exports set 'toIL [fn [ast]
    [def functions '[]]
    [def fnid 0]
    [def compileFunction [fn [name args ast]
        [def locals '[]]
        [def globals '[]]
        [def consts '[]]
        [def currentFunction '[]]
        [def compileExpression [fn [expr withArg]
            [if [Array isArray expr] [do
            [def code '[]]
            [def subexpr [expr slice 0]]
            [subexpr set 1 [subexpr get 0]]
            [console log subexpr]
            [set subexpr [subexpr slice 1]]
            [while [0 < [subexpr get 'length]]
                [set code [code concat [compileExpression call null [subexpr pop] true]]]]
            [return code]] ]
            [if [withArg fails] [return '[]]]
            [# look up var]
            [set op 'getVar]
            [set id expr]
            [new array [new array op id]]]]
        [def code [compileExpression call null [ast slice 0] true]]
        [code push '[return]]
        [currentFunction push [new array 'id name]]
        [currentFunction push [new array 'args args]]
        [currentFunction push [new array 'locals locals]]
        [currentFunction push [new array 'globals globals]]
        [currentFunction push [new array 'consts consts]]
        [currentFunction push [new array 'code code]]
        currentFunction
    ]]
    [functions push [compileFunction call null 'entry '[] ast]]
    [console log functions]
    functions]]
