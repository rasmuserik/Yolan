[def  compileJS 
  [new  object 
    ['do [fn [syn] [[[syn slice 1] map [exports get 'toJS]] join ';]]] 
    ['def [fn [syn syn1] ['var\  + syn1 '= [exports toJS [syn get 2]]]]] 
    ['set [fn [syn syn1] [syn1 + '= [exports toJS [syn get 2]]]]] 
    [' new 
      [fn  [syn syn1] 
        [if  [syn1 == 'object] 
          [return 
            [' {  + 
              [[[syn slice 2]  map 
                  [fn  [pair] 
                    [[exports toJS [pair get 0]]  +  ' : 
                      [exports toJS [pair get 1]]]]] 
                join  ' ,] 
              ' }]]] 
        [if  [syn1 == 'array] 
          [return 
            [' \[  + 
              [[[syn slice 2] map [exports get 'toJS]] join ',] 
              ' \]]]] 
        undefined]] 
    [' fn 
      [fn  [syn syn1] 
        [' function(  + 
          [syn1 join ',] 
          ' ){ 
          [[[syn slice 2 -1] map [exports get 'toJS]] join ';] 
          ' ;return\  
          [exports toJS [syn get [[syn get 'length] - 1]]] 
          ' }]]] 
    [' try-catch 
      [fn  [syn syn1] 
        [' try{  + 
          [exports toJS [syn get 2]] 
          ' }catch( 
          [syn get 1] 
          ' ){ 
          [exports toJS [syn get 3]] 
          ' }]]] 
    [' while 
      [fn  [syn syn1] 
        [' while(  + 
          [exports toJS syn1] 
          ' ){ 
          [[[syn slice 2] map [exports get 'toJS]] join ';] 
          ' }]]] 
    [' if-else 
      [fn  [syn syn1] 
        [' if(  + 
          [exports toJS syn1] 
          ' ){ 
          [exports toJS [syn get 2]] 
          ' }else{ 
          [exports toJS [syn get 3]] 
          ' }]]] 
    ['@annotation [fn [syn] [exports toJS [syn get 2]]]] 
    ['return [fn [syn syn1] ['return\  + [exports toJS syn1]]]] 
    ['quote [fn [syn syn1] [JSON stringify syn1]]]]]

[exports  set  ' toJS 
  [fn  [syn] 
    [if [syn fails] [return ""]] 
    [def syn0 [syn get 0]] 
    [def syn1 [syn get 1]] 
    [def syn2 [syn get 2]] 
    [if [[syn jsType] == 'string] [return syn]] 
    [if  [compileJS get syn0] 
      [return [[compileJS get syn0] call null syn syn1]]] 
    [if  [syn1 == 'set] 
      [return 
        [[exports toJS syn0]  +  ' \[ 
          [exports toJS syn2] 
          ' \]= 
          [exports toJS [syn get 3]]]]] 
    [if  [syn1 == '+] 
      [return 
        [' (  + 
          [[[new array [exports toJS syn0]]  concat 
              [[syn slice 2] map [exports get 'toJS]]] 
            join  ' +] 
          ' )]]] 
    [if  [syn1 == '-] 
      [return 
        [' (  + 
          [[[new array [exports toJS syn0]]  concat 
              [[syn slice 2] map [exports get 'toJS]]] 
            join  ' -] 
          ' )]]] 
    [if  [syn1 == 'and] 
      [return 
        [' (  + 
          [[[new array [exports toJS syn0]]  concat 
              [[syn slice 2] map [exports get 'toJS]]] 
            join  ' &&] 
          ' )]]] 
    [if  [syn1 == 'or] 
      [return 
        [' (  + 
          [[[new array [exports toJS syn0]]  concat 
              [[syn slice 2] map [exports get 'toJS]]] 
            join  ' ||] 
          ' )]]] 
    [if  [syn1 == '==] 
      [return ['( + [exports toJS syn0] '=== [exports toJS syn2] ')]]] 
    [if  [syn1 == '<] 
      [return ['( + [exports toJS syn0] '< [exports toJS syn2] ')]]] 
    [if [syn1 == 'fails] [return ['!( + [exports toJS syn0] ')]]] 
    [if [syn1 == 'jsType] [return ['typeof\  + [exports toJS syn0]]]] 
    [if  [syn1 == 'get] 
      [return [[exports toJS syn0] + '\[ [exports toJS syn2] '\]]]] 
    [if  [[syn0 jsType] == 'string] 
      [return 
        [[exports toJS syn0]  +  ' .  syn1  ' ( 
          [[[syn slice 2] map [exports get 'toJS]] join ',] 
          ' )]]] 
    [[exports toJS syn0]  +  ' .  syn1  ' ( 
      [[[syn slice 2] map [exports get 'toJS]] join ',] 
      ' )]]]
