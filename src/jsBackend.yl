[def compileJS
  [# ['builtin: [fn [syn] [return [exports toJS [syn slice 1]]]]]
    ['do [fn [syn] [return [[[syn slice 1] map [exports 'toJS]] join ';\n]]]]
    ['def
      [fn [syn syn1]
        [return ['var\  + syn1 '= [exports toJS [syn get 2]]]]]]
    ['set [fn [syn syn1] [return [syn1 + '= [exports toJS [syn get 2]]]]]]
    ['new-object
      [fn [syn]
        [def result '[]]
        [def i 1]
        [while [i < [syn 'length]]
          [result push
            [[exports toJS [syn get i]] +
              ':
              [exports toJS [syn get [i + 1]]]]]
          [set i [i + 2]]]
        [return ['{\n + [result join ","] '\n}]]]]
    ['new
      [fn [syn syn1]
        [if [syn1 == 'object]
          [return
            ['{\n +
              [[[syn slice 2] map
                  [fn [pair]
                    [return
                      [[exports toJS [pair get 0]] +
                        ':
                        [exports toJS [pair get 1]]]]]]
                join
                ',]
              '\n}]]]
        [if [syn1 == 'array]
          [return ['\[ + [[[syn slice 2] map [exports 'toJS]] join ',] '\]]]]
        [return ['new\  + syn1 '()]]]]
    ['fn
      [fn [syn syn1]
        [return
          ['function( +
            [syn1 join ',]
            '){\n
            [[[syn slice 2] map [exports 'toJS]] join ';\n]
            '\n}]]]]
    ['try-catch
      [fn [syn syn1]
        [return
          ['try{\n +
            [exports toJS [syn get 2]]
            '\n}catch(
            [syn get 1]
            '){\n
            [exports toJS [syn get 3]]
            '\n}]]]]
    ['while
      [fn [syn syn1]
        [return
          ['while( +
            [exports toJS syn1]
            '){\n
            [[[syn slice 2] map [exports 'toJS]] join ';\n]
            '\n}]]]]
    ['if-else
      [fn [syn syn1]
        [return
          ['if( +
            [exports toJS syn1]
            '){\n
            [exports toJS [syn get 2]]
            '\n}else{\n
            [exports toJS [syn get 3]]
            '\n}]]]]
    ['Annotation: [fn [syn] [return [exports toJS [syn get 2]]]]]
    ['return [fn [syn syn1] [return ['return\  + [exports toJS syn1]]]]]
    ['quote [fn [syn syn1] [return [JSON stringify syn1]]]]]]

[exports set
  'toJS
  [fn [syn]
    [if [syn fails] [return ""]]
    [def syn0 [syn get 0]]
    [def syn1 [syn get 1]]
    [def syn2 [syn get 2]]
    [if [[syn jsType] == 'string] [return syn]]
    [if [compileJS get syn0]
      [return [[compileJS get syn0] call null syn syn1]]]
    [if [syn1 == '<<]
      [return ['( + [exports toJS syn0] '<< [exports toJS syn2] ')]]]
    [if [syn1 == '>>]
      [return ['( + [exports toJS syn0] '>> [exports toJS syn2] ')]]]
    [if [syn1 == 'set]
      [return
        [[exports toJS syn0] +
          '\[
          [exports toJS syn2]
          '\]=
          [exports toJS [syn get 3]]]]]
    [if [syn1 == '/]
      [return
        ['( +
          [[[@ [exports toJS syn0]] concat
              [[syn slice 2] map [exports 'toJS]]]
            join
            '/]
          ')]]]
    [if [syn1 == '*]
      [return
        ['( +
          [[[@ [exports toJS syn0]] concat
              [[syn slice 2] map [exports 'toJS]]]
            join
            '*]
          ')]]]
    [if [syn1 == '|]
      [return
        ['( +
          [[[@ [exports toJS syn0]] concat
              [[syn slice 2] map [exports 'toJS]]]
            join
            '|]
          ')]]]
    [if [syn1 == '&]
      [return
        ['( +
          [[[@ [exports toJS syn0]] concat
              [[syn slice 2] map [exports 'toJS]]]
            join
            '&]
          ')]]]
    [if [syn1 == '+]
      [return
        ['( +
          [[[@ [exports toJS syn0]] concat
              [[syn slice 2] map [exports 'toJS]]]
            join
            '+]
          ')]]]
    [if [syn1 == '-]
      [return
        ['( +
          [[[@ [exports toJS syn0]] concat
              [[syn slice 2] map [exports 'toJS]]]
            join
            '-]
          ')]]]
    [if [syn1 == 'and]
      [return
        ['( +
          [[[@ [exports toJS syn0]] concat
              [[syn slice 2] map [exports 'toJS]]]
            join
            '&&]
          ')]]]
    [if [syn1 == 'or]
      [return
        ['( +
          [[[@ [exports toJS syn0]] concat
              [[syn slice 2] map [exports 'toJS]]]
            join
            '||]
          ')]]]
    [if [syn1 == '==]
      [return ['( + [exports toJS syn0] '=== [exports toJS syn2] ')]]]
    [if [syn1 == '<]
      [return ['( + [exports toJS syn0] '< [exports toJS syn2] ')]]]
    [if [syn1 == 'fails] [return ['!( + [exports toJS syn0] ')]]]
    [if [syn1 == 'jsType] [return ['typeof\  + [exports toJS syn0]]]]
    [if [syn1 == 'get]
      [return [[exports toJS syn0] + '\[ [exports toJS syn2] '\]]]]
    [if [[syn0 jsType] == 'string]
      [return
        [[exports toJS syn0] +
          '.
          syn1
          '(
          [[[syn slice 2] map [exports 'toJS]] join ',]
          ')]]]
    [return
      [[exports toJS syn0] +
        '.
        syn1
        '(
        [[[syn slice 2] map [exports 'toJS]] join ',]
        ')]]]]
