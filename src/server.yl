[def http [module require 'http]]

[def fs [module require 'fs]]

[def yolan [module require './yolan]]

[def xml [module require './xml]]

[; def scriptList ' [yolan webmain]]

[def scriptList
  ['[yolan] concat
    [[[fs readdirSync 'src] filter [fn [name] [[name slice -3] == '.yl]]]
      map
      [fn [name] [name slice 0 -3]]]]]

[def head
  ['<!DOCTYPE\ html><html> + [xml fromYl [module require './htmlheader]]]]

[def body
  ['<body><script>function\ define(_,_,f){f()};</script> +
    [[scriptList map
        [fn [name] ['<script\ src="/ + name '.js"></script>]]]
      join ""]
    '<script>require("./main").run(location.hash.slice(1).split("\ "));</script></body></html>]]

[exports set
  'run
  [fn []
    [[http createServer
        [fn [request result]
          [def url [request get 'url]]
          [console log [request get 'url]]
          [if [[url slice -3] == '.js]
            [result writeHead 200
              [new object ['Content-Type 'text/javascript]]]
            [def name ['. + [url slice 0 -3]]]
            [fs readFile
              ['./src/ + name '.yl]
              'utf8
              [fn [err data]
                [if err [result end [err toString]] [return false]]
                [result end
                  ['define(" + name
                    '",\["require","exports","module"\],function(require,exports,module){
                    [[module require './compile] yl2js data]
                    '});]]]]
            [return true]]
          [console log [url slice 0 5]]
          [if [[url slice 0 14] == '/readTextFile/]
            [result writeHead 200 [new object ['Content-Type 'text/plain]]]
            [yolan readTextFile
              [url slice 14]
              [fn [err data]
                [if err [result end [JSON stringify err]] [return false]]
                [result end data]]]
            [return true]]
          [if [[url slice 0 15] == '/writeTextFile/]
            [def buf ""]
            [request on
              'data
              [fn [data] [set buf [buf + [data toString]]]]]
            [request on
              'end
              [fn [data]
                [fs writeFile
                  [url slice 15]
                  buf
                  [fn [err data]
                    [if err
                      [result writeHead 500
                        [new object ['Content-Type 'text/plain]]]
                      [result end [err toString]]
                      [return false]]
                    [result writeHead 200
                      [new object ['Content-Type 'text/plain]]]
                    [result end "OK"]]]]]
            [return true]]
          [if [[url slice 0 5] == '/get/]
            [result writeHead 200 [new object ['Content-Type 'text/plain]]]
            [fs readFile
              ['./src/ + [url slice 5] '.yl]
              'utf8
              [fn [err data]
                [if err [result end [err toString]] [return false]]
                [result end data]]]
            [return true]]
          [if [[url slice 0 5] == '/put/]
            [def buf ""]
            [result writeHead 200 [new object ['Content-Type 'text/plain]]]
            [request on
              'data
              [fn [data] [set buf [buf + [data toString]]]]]
            [request on
              'end
              [fn [data]
                [fs writeFile
                  ['./src/ + [url slice 5] '.yl]
                  buf
                  [fn [err data]
                    [if err [result end [err toString]] [return false]]
                    [result end ""]]]]]
            [return true]]
          [result writeHead 200 [new object ['Content-Type 'text/html]]]
          [result end [head + body]]
          true]]
      listen 1234
      'localhost]
    [console log '[starting server on localhost port 1234]]]]
