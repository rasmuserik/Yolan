[def htmlView exports]

[def yolan [module require './yolan]]

[def syntax [module require './syntax]]

[def webcolor [module require './webcolor]]

[def test [module require './test]]

[exports set
  'randomColor
  [fn [elem str]
    [def style [elem 'style]]
    [style set 'backgroundColor [webcolor hashLightColor str]]
    [style set 'borderColor [webcolor hashColor str]]]]

[exports set
  'newElem
  [fn [elemType text]
    [def elem [document createElement elemType]]
    [elem appendChild [document createTextNode text]]
    [return elem]]]

[exports set
  'style2css
  [fn [style]
    [def keys [Object keys style]]
    [def result [@]]
    [def i 0]
    [while [i < [keys 'length]]
      [def key [keys get i]]
      [result push '.]
      [result push key]
      [result push '{]
      [result push
        [[[style get key] map
            [fn [elem]
              [return [[elem get 0] + ': [[elem slice 1] join '\ ]]]]]
          join
          ';]]
      [result push '}\n]
      [inc i]]
    [return [result join ""]]]]

[exports set
  'setupStyle
  [fn []
    [def style
      [# ['cursor '[[border .3em solid red] [border-radius .9em]]]
        ['listAtom
          '[[margin 0em .0em 0em .0em]
            [background-color rgba(255,255,255,0.5)]
            [border-radius .3em]
            [white-space pre-wrap]
            [font-family sans-serif]]]
        ['list
          '[[padding .1em .1em .1em .2em] [margin .1em .1em .1em .1em]
            [display inline-block]
            [xborder-radius .3em]
            [border 2px solid]
            [xbox-shadow .2em .2em .6em rgba(0,0,0,.4)]]]]]
    [[[document getElementsByTagName 'head] get 0] appendChild
      [exports newElem 'style [exports style2css style]]]]]

[def curPos 0]

[exports set
  'scrollToCursor
  [[fn []
      [def running false]
      [return
        [fn []
          [if running [return]]
          [def pos [cursorNode getBoundingClientRect]]
          [def cursorMargin [[window 'innerHeight] / 5]]
          [if
            [[[pos 'top] < [0 + cursorMargin]] or
              [[[window 'innerHeight] - cursorMargin] < [pos 'bottom]]]
            [window setTimeout
              [fn []
                [def desiredPos
                  [curPos + [[pos 'top] - [[window 'innerHeight] / 2]]]]
                [def nextPos [[curPos * .95] + [desiredPos * .05]]]
                [window scrollTo 0 nextPos]
                [set curPos nextPos]]
              0]
            [window setTimeout [htmlView 'scrollToCursor] 10]
            [set running true]]
          [set running false]]]]
    call]]

[def cursorNode undefined]

[exports set
  'update
  [fn [obj]
    [if [cursorNode fails]
      [set cursorNode [document createElement 'span]]
      [cursorNode set 'className 'cursor]
      [cursorNode appendChild [document createTextNode '|]]]
    [def elem [obj 'elem]]
    [if [elem fails]
      [set elem [document createElement 'span]]
      [obj set 'elem elem]]
    [if-else [obj 'value]
      [do [elem set 'className 'listAtom]
        [while [elem hasChildNodes] [elem removeChild [elem 'lastChild]]]
        [if-else [[[obj 'cursor] == undefined] fails]
          [do
            [elem appendChild
              [document createTextNode
                [[JSON stringify [[obj 'value] slice 0 [obj 'cursor]]] slice
                  1 -1]]]
            [elem appendChild cursorNode]
            [htmlView scrollToCursor]
            [elem appendChild
              [document createTextNode
                [[JSON stringify [[obj 'value] slice [obj 'cursor]]] slice 1
                  -1]]]]
          [elem appendChild
            [document createTextNode
              [[JSON stringify [obj 'value]] slice 1 -1]]]]]
      [do [elem set 'className 'list]
        [while [elem hasChildNodes] [elem removeChild [elem 'lastChild]]]
        [Section: Assign a random color based on the text of the first child
          [def text "undefined"]
          [if
            [[obj 'children] and
              [[obj 'children] get 0]
              [[[obj 'children] get 0] 'value]]
            [set text [[[obj 'children] get 0] 'value]]]
          [exports randomColor elem text]]
        [def i 0]
        [def len [[obj 'children] 'length]]
        [while [i < len]
          [Section: whitespace between children
            [if i [elem appendChild [document createTextNode '\ ]]]]
          [if
            [[[[obj 'cursor] == undefined] fails] and [[obj 'cursor] == i]]
            [elem appendChild cursorNode]
            [htmlView scrollToCursor]
            [elem appendChild [document createTextNode '\ ]]]
          [if [[[[obj 'children] get i] 'elem] fails]
            [htmlView update [[obj 'children] get i]]]
          [elem appendChild [[[obj 'children] get i] 'elem]]
          [inc i]]
        [if [[[[obj 'cursor] == undefined] fails] and [[obj 'cursor] == i]]
          [elem appendChild cursorNode]
          [htmlView scrollToCursor]
          [elem appendChild [document createTextNode '\ ]]]]]
    [return obj]]]
