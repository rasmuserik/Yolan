[; [set ?a [?a + 1]]
  [inc ?a]
  [if ?a ...b]
  [if-else ?a [do ...b] [do]]
  [if ?a ?b]
  [if-else ?a ?b [do]]
  [do ?a]
  [...b [def ?a 0] [while [?a < ?b] ... [set ?a [?a + 1]]] ...c]
  [set ?a [?a + 1]]
  [set ?a [?a - 1]]
  [... ' ?a ...]]

[def match exports]

[match set
  'deepEqual
  [fn [a b]
    [if [a == b] [return true]]
    [if [[a jsType] == 'string] [return false]]
    [if [[b jsType] == 'string] [return false]]
    [if [[[a 'length] == [b 'length]] fails] [return false]]
    [def i 0]
    [while [i < [a 'length]]
      [if [[match deepEqual [a get i] [b get i]] fails] [return false]]
      [set i [i + 1]]]
    [return true]]]

[match set
  'pattern
  [fn [pattern obj ctx]
    [set ctx [ctx or [#]]]
    [if [[pattern jsType] == 'string] [return [[pattern == obj] and ctx]]]
    [if [[obj jsType] == 'string] [return false]]
    [if [[pattern 'length] == 0] [return [[[obj 'length] == 0] and ctx]]]
    [def car [pattern get 0]]
    [def cdr [pattern slice 1]]
    [if [[car slice 0 3] == '...]
      [def capt [@]]
      [def name [car slice 3]]
      [def prevCapt [name and [ctx get name]]]
      [if name [ctx set name capt]]
      [while true
        [if [match pattern cdr obj ctx]
          [if [prevCapt fails] [return ctx]]
          [if [match deepEqual capt prevCapt] [return ctx]]]
        [if [[obj 'length] == 0] [return false]]
        [capt push [obj get 0]]
        [set obj [obj slice 1]]]]
    [if [[obj 'length] == 0] [return false]]
    [if [[car get 0] == '?]
      [def capt [obj get 0]]
      [def name [car slice 1]]
      [def prevCapt [name and [ctx get name]]]
      [if name [ctx set name capt]]
      [if [prevCapt and [[match deepEqual prevCapt capt] fails]]
        [return false]]
      [return [match pattern cdr [obj slice 1] ctx]]]
    [return
      [[match pattern car [obj get 0] ctx] and
        [match pattern cdr [obj slice 1] ctx]]]]]

[match set
  'run
  [fn []
    [console log [match pattern '[... foo ...b] '[foo bar baz]]]
    [console log [match pattern '[...a bar ...b] '[foo bar baz]]]
    [console log [match pattern '[...a baz ...b] '[foo bar baz]]]
    [console log [match pattern '[...a bar ...a] '[foo bar baz]]]
    [console log [match pattern '[...a bar ...a] '[foo bar foo]]]
    [console log [match pattern '[...a quuz ...b] '[foo bar baz]]]
    [console log [match pattern '[?a ?b] '[foo bar]]]
    [console log [match pattern '[?a ?a] '[foo bar]]]
    [console log [match pattern '[?a ?a] '[foo foo]]]]]
