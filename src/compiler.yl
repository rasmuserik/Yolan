[def fs [module require 'fs]]

[def syntax [module require './syntax]]

[def jsBackend [module require './jsBackend]]

[def ilBackend [module require './ilBackend]]

[def action [[process get 'argv] get 2]]

[if-else [action == 'toJavaScript]
  [fs readFile
    [[process get 'argv] get 3]
    'utf8
    [fn [err data]
      [if-else err [return err]]
      [# compile exports to js]
      [def js [jsBackend toJS [syntax parse [syntax tokenize data]]]]
      [# reformat js]
      [def uglify [require call null 'uglify-js]]
      [def jsp [uglify get 'parser]]
      [def pro [uglify get 'uglify]]
      [def ast [jsp parse js]]
      [set js [pro gen_code ast [new object ['beautify true]]]]
      [fs writeFile
        [[process get 'argv] get 4]
        js
        [fn [err data] [if-else err [return err]] true]]]]]

[if-else [action == 'toIntermediateLanguage]
  [fs readFile
    [[process get 'argv] get 3]
    'utf8
    [fn [err data]
      [if-else err [return err]]
      [def il [ilBackend toIL [syntax parse [syntax tokenize data]]]]
      [console log [syntax prettyprint il]]
      [def txt [ilBackend binaryEncode il]]
      [console log txt]
      [fs writeFile
        [[process get 'argv] get 4]
        [txt + '\n]
        [fn [err data] [if-else err [return err]] true]]]]]

[if-else [action == 'prettyprint]
  [fs readFile
    [[process get 'argv] get 3]
    'utf8
    [fn [err data]
      [if-else err [return err]]
      [def ast [macros transform [syntax parse [syntax tokenize data]]]]
      [def src
        [[[[[macros reverse ast] slice 1] map [syntax get 'prettyprint]] join '\n\n] +]
        '\n]
      [fs writeFile
        [[process get 'argv] get 4]
        src
        [fn [err data] [if-else err [return err]] true]]]]]

[if-else [action == 'transform]
  [fs readFile
    [[process get 'argv] get 3]
    'utf8
    [fn [err data]
      [if-else err [return err]]
      [def ast [syntax parse [syntax tokenize data]]]
      [set ast [[module require './transform] transform ast]]
      [def src
        [[[[ast slice 1] map [syntax get 'prettyprint]] join '\n\n] +]
        '\n]
      [fs writeFile
        [[process get 'argv] get 4]
        src
        [fn [err data] [if-else err [return err]] true]]]]]

[if-else [action == 'test] [console log 'hello\ world]]
