[Section: foo bar baz quuz [console log 'hello]]

[def yolan [module require './yolan]]

[def syntax [module require './syntax]]

[def webcolor [module require './webcolor]]

[def test [module require './test]]

[Section: Model
  [def listPrototype
    [# ['update [fn [] [htmlView update this]]]
      ['getLength
        [fn []
          [if-else [this 'children]
            [return [[this 'children] 'length]]
            [return [[this 'value] 'length]]]]]]]
  [def listModel [#]]
  [listModel set
    'create
    [fn [list]
      [def result [Object create listPrototype]]
      [if [[Array isArray list] fails]
        [result set 'value list]
        [return result]]
      [result set
        'children
        [list map
          [fn [elem]
            [def t [listModel create elem]]
            [t set 'parent result]
            [return t]]]]
      [return result]]]]

[Section: View
  [Section: utility function for creating a html element
    [exports set
      'newElem
      [fn [elemType text]
        [def elem [document createElement elemType]]
        [elem appendChild [document createTextNode text]]
        [return elem]]]]
  [Section: add style to head
    [Section: Utility function for converting yolan style to css
      [exports set
        'style2css
        [fn [style]
          [def keys [Object keys style]]
          [def result [@]]
          [def i 0]
          [while [i < [keys 'length]]
            [def key [keys get i]]
            [result push '.]
            [result push key]
            [result push '{]
            [result push
              [[[style get key] map
                  [fn [elem]
                    [return [[elem get 0] + ': [[elem slice 1] join '\ ]]]]]
                join
                ';]]
            [result push '}\n]
            [set i [i + 1]]]
          [return [result join ""]]]]]
    [Section: The desired style in list format
      [exports set
        'style
        [# ['cursor '[[border .3em solid red] [border-radius .9em]]]
          ['listAtom
            '[[margin 0em .0em 0em .0em]
              [background-color rgba(255,255,255,0.5)]
              [border-radius .3em]
              [white-space pre-wrap]
              [font-family sans-serif]]]
          ['list
            '[[padding .1em .1em .1em .2em] [margin .1em .1em .1em .1em]
              [display inline-block]
              [xborder-radius .3em]
              [border 2px solid]
              [xbox-shadow .2em .2em .6em rgba(0,0,0,.4)]]]]]]
    [Section: set the style in the head-tag
      [[[document getElementsByTagName 'head] get 0] appendChild
        [exports newElem 'style [exports style2css [exports 'style]]]]]
    [Section: utility for setting random color
      [exports set
        'randomColor
        [fn [elem str]
          [def color [[[Math random] * 0x1000000] & 0xffffff]]
          [def style [elem 'style]]
          [style set 'backgroundColor [webcolor hashLightColor str]]
          [style set 'borderColor [webcolor hashColor str]]]]]]
  [Section: predefined cursor dom node
    [def cursorNode [document createElement 'span]]
    [cursorNode set 'className 'cursor]
    [cursorNode appendChild [document createTextNode '|]]]
  [def htmlView
    [#
      ['scrollToCursor [[fn [] [def running false] [return [fn []
        [console log [window 'pageYOffset]]
        [if running [return]]
        [def pos [cursorNode getBoundingClientRect]]
        [console log [window 'pageYOffset]]
        [def cursorMargin [window 'innerHeight / 5]]
        [if [[pos 'top < [0 + cursorMargin]] or [[window 'innerHeight - cursorMargin] < [pos 'bottom]]]
            [def desiredPos [[window 'pageYOffset] + [pos 'top - [window 'innerHeight / 2]]]]
            [console log [window 'pageYOffset] desiredPos [[window 'pageYOffset * .95] + [desiredPos * .05]]]
            [window setTimeout [fn [] [window scrollTo 0 [[window 'pageYOffset * .95] + [desiredPos * .05]]]] 0]
            [window setTimeout [htmlView 'scrollToCursor] 20]
            [set running true]
        ]
        [set running false]
      ]]] call]]
      ['update
        [fn [obj]
          [def elem [obj 'elem]]
          [if [elem fails]
            [set elem [document createElement 'span]]
            [obj set 'elem elem]]
          [if-else [obj 'value]
            [do [elem set 'className 'listAtom]
              [while [elem hasChildNodes]
                [elem removeChild [elem 'lastChild]]]
              [if-else [[[obj 'cursor] == undefined] fails]
                [do
                  [elem appendChild
                    [document createTextNode
                      [[JSON stringify
                          [[obj 'value] slice 0 [obj 'cursor]]]
                        slice 1 -1]]]
                  [elem appendChild cursorNode]
                  [htmlView scrollToCursor]
                  [elem appendChild
                    [document createTextNode
                      [[JSON stringify [[obj 'value] slice [obj 'cursor]]]
                        slice 1 -1]]]]
                [elem appendChild
                  [document createTextNode
                    [[JSON stringify [obj 'value]] slice 1 -1]]]]]
            [do [elem set 'className 'list]
              [while [elem hasChildNodes]
                [elem removeChild [elem 'lastChild]]]
              [Section: Assign a random color based on the text of the first
                child
                [def text "undefined"]
                [if
                  [[obj 'children] and
                    [[obj 'children] get 0]
                    [[[obj 'children] get 0] 'value]]
                  [set text [[[obj 'children] get 0] 'value]]]
                [exports randomColor elem text]]
              [def i 0]
              [def len [[obj 'children] 'length]]
              [while [i < len]
                [Section: whitespace between children
                  [if i [elem appendChild [document createTextNode '\ ]]]]
                [if
                  [[[[obj 'cursor] == undefined] fails] and
                    [[obj 'cursor] == i]]
                  [elem appendChild cursorNode]
                  [htmlView scrollToCursor]
                  [elem appendChild [document createTextNode '\ ]]]
                [if [[[[obj 'children] get i] 'elem] fails]
                  [htmlView update [[obj 'children] get i]]]
                [elem appendChild [[[obj 'children] get i] 'elem]]
                [set i [i + 1]]]
              [if
                [[[[obj 'cursor] == undefined] fails] and
                  [[obj 'cursor] == i]]
                [elem appendChild cursorNode]
                  [htmlView scrollToCursor]
                [elem appendChild [document createTextNode '\ ]]]]]
          [return obj]]]]]]

[def cursorRef undefined]

[def cursor
  [#
    ['moveTo
      [fn [obj pos]
        [if cursorRef [cursorRef set 'cursor undefined] [cursorRef update]]
        [set cursorRef obj]
        [cursorRef set 'cursor pos]
        [cursorRef update]]]
    ['moveUp
      [fn []
        [cursorRef set 'cursor [[cursorRef 'cursor] - 1]]
        [if [[[cursorRef 'cursor] < 0] and [cursorRef 'parent]]
          [console log [cursorRef 'parent]]
          [cursor moveTo
            [cursorRef 'parent]
            [[[cursorRef 'parent] 'children] indexOf cursorRef]]
          [return]]
        [if [[cursorRef 'cursor] < 0] [cursorRef set 'cursor 0]]
        [cursorRef update]]]
    ['moveDown
      [fn []
        [cursorRef set 'cursor [[cursorRef 'cursor] + 1]]
        [if
          [[[cursorRef getLength] < [cursorRef 'cursor]] and
            [cursorRef 'parent]]
          [cursor moveTo
            [cursorRef 'parent]
            [[[[cursorRef 'parent] 'children] indexOf cursorRef] + 1]]
          [return]]
        [cursorRef update]]]
    ['movePrev
      [fn []
        [if [[cursorRef 'children] and [0 < [cursorRef 'cursor]]]
          [def child [[cursorRef 'children] get [[cursorRef 'cursor] - 1]]]
          [cursor moveTo child [child getLength]]
          [return]]
        [cursorRef set 'cursor [[cursorRef 'cursor] - 1]]
        [if [[[cursorRef 'cursor] < 0] and [cursorRef 'parent]]
          [console log [cursorRef 'parent]]
          [cursor moveTo
            [cursorRef 'parent]
            [[[cursorRef 'parent] 'children] indexOf cursorRef]]
          [return]]
        [if [[cursorRef 'cursor] < 0] [cursorRef set 'cursor 0]]
        [cursorRef update]]]
    ['moveNext
      [fn []
        [if
          [[cursorRef 'children] and
            [[cursorRef 'cursor] < [[cursorRef 'children] 'length]]]
          [cursor moveTo [[cursorRef 'children] get [cursorRef 'cursor]] 0]
          [return]]
        [cursorRef set 'cursor [[cursorRef 'cursor] + 1]]
        [if
          [[[cursorRef getLength] < [cursorRef 'cursor]] and
            [cursorRef 'parent]]
          [cursor moveTo
            [cursorRef 'parent]
            [[[[cursorRef 'parent] 'children] indexOf cursorRef] + 1]]
          [return]]
        [cursorRef update]]]]]

[Section: Controller
  [def keyController [#]]
  [def handleKeyEvent
    [fn [ev]
      [if [Annotation: [Section: "L"] [do [[ev 'keyCode] == 76]]]
        [cursor moveNext]
        [return]]
      [if [Annotation: [Section: "H"] [do [[ev 'keyCode] == 72]]]
        [cursor movePrev]
        [return]]
      [if [Annotation: [Section: "K"] [do [[ev 'keyCode] == 75]]]
        [cursor moveUp]
        [return]]
      [if [Annotation: [Section: "K"] [do [[ev 'keyCode] == 74]]]
        [cursor moveDown]
        [return]]
      [console log ev]]]
  [keyController set
    'start
    [fn [] [[document 'body] set 'onkeydown handleKeyEvent]]]]

[exports set
  'run
  [fn [filename]
    [if [filename fails]
      [[document 'body] set 'innerHTML 'Usage:\ weblist\ filename]
      [return undefined]]
    [yolan readTextFile filename
      [fn [err data]
        [if err [console log 'Error: err] [return undefined]]
        [[[document 'body] 'style] set 'margin '0px]
        [[[document 'body] 'style] set 'background '#f8f8f8]
        [def list [syntax parse [syntax tokenize data]]]
        [def obj [listModel create list]]
        [console log obj]
        [obj update]
        [cursor moveTo [[obj 'children] get 0] 0]
        [keyController start]
        [[document 'body] appendChild [obj 'elem]]]]]]
