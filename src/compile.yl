[def fs [module require 'fs]]

[def yolan [module require './yolan]]

[def syntax [module require './syntax]]

[def macros [module require './macros]]

[def jsBackend [module require './jsBackend]]

[def ilBackend [module require './ilBackend]]

[def action [[process 'argv] get 2]]

[exports set
  'sourceFiles
  [[fs readdirSync 'src] filter
    [fn [name] [return [[name slice -3] == '.yl]]]]]

[def mtime
  [fn [fname]
    [try-catch e
      [return [[[fs statSync fname] 'mtime] getTime]]
      [return 0]]
    [return 0]]]

[exports set
  'run
  [fn []
    [return
      [[exports 'sourceFiles] forEach
        [fn [f]
          [def src ['src/ + f]]
          [def dest ['build/ + [f slice 0 -3]]]
          [if [[mtime call null [dest + '.js]] < [mtime call null src]]
            [compile call null src dest]]
          [return undefined]]]]]]

[exports set
  'yl2js
  [fn [src]
    [return
      [jsBackend toJS
        [macros transform [syntax parse [syntax tokenize src]]]]]]]

[def compile
  [fn [src dest]
    [return
      [fs readFile src
        'utf8
        [fn [err data]
          [yolan log src '-> dest]
          [if err [return err]]
          [; compile exports to js]
          [def ast
            [macros transform [syntax parse [syntax tokenize data]]]]
          [; yolan log [syntax prettyprint ast]]
          [def js [jsBackend toJS ast]]
          [def sourceCode
            [[[[[macros reverse ast] slice 1] map [syntax 'prettyprint]]
                join
                '\n\n]
              +
              '\n]]
          [fs writeFile [dest + '.ast] [syntax prettyprint ast]]
          [fs writeFile [dest + '.yl] sourceCode]
          [fs writeFile [dest + '.js.raw] sourceCode]
          [; reformat js]
          [def uglify [require call null 'uglify-js]]
          [def jsp [uglify 'parser]]
          [def pro [uglify 'uglify]]
          [try-catch e
            [def ast [jsp parse js]]
            [do [yolan log dest] [yolan log e]]]
          [set js [pro gen_code ast [# ['beautify true]]]]
          [fs writeFile
            [dest + '.js]
            js
            [fn [err data] [if err [return err]] [return true]]]]]]]]
