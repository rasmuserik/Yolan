[def diff exports]

[diff set
  'edit
  [fn [arr0 arr1]
    [def start 0]
    [def result [@]]
    [while
      [[[arr0 get start] == [arr1 get start]] and [start < [arr0 'length]]]
      [result push 'skip]
      [inc start]]
    [def i [[arr0 'length] - 1]]
    [def j [[arr1 'length] - 1]]
    [def end 0]
    [while [[[arr0 get i] == [arr1 get j]] and [start <= i]]
      [set i [i - 1]]
      [set j [j - 1]]
      [inc end]]
    [while [start <= i] [result push 'del] [set i [i - 1]]]
    [while [start <= j] [result push 'ins] [set j [j - 1]]]
    [while [0 < end] [result push 'skip] [set end [end - 1]]]
    [return result]]]

[diff set
  'run
  [fn [] [console log [diff edit '[a b c d e f] '[a b h d e f]]]]]

[diff set
  'levenshtein
  [fn [arr0 arr1]
    [def prev [@]]
    [def current [@]]
    [def t undefined]
    [def ops [@]]
    [def prevOps [@]]
    [def i 0]
    [while [i <= [arr0 'length]]
      [current push i]
      [if [1 <= i] [ops set i [@ 'del [ops get [i - 1]]]]]
      [inc i]]
    [def j 1]
    [while [j <= [arr1 'length]]
      [Section: swap prev/current
        [set t prev]
        [set prev current]
        [set current t]]
      [current set 0 j]
      [Section: swap prevOps/ops
        [set t prevOps]
        [set prevOps ops]
        [set ops t]]
      [ops set 0 [@ 'ins [prevOps get 0]]]
      [def cj [arr1 get [j - 1]]]
      [set i 1]
      [while [i <= [arr0 'length]]
        [def ci [arr0 get [i - 1]]]
        [if-else [ci == cj]
          [do [ops set i [@ 'skip [prevOps get [i - 1]]]]
            [current set i [prev get [i - 1]]]]
          [do [def subLength [[prev get [i - 1]] + 1]]
            [def delLength [[prev get i] + 1]]
            [def insLength [[current get [i - 1]] + 1]]
            [def minLength [Math min delLength subLength insLength]]
            [if-else [subLength == minLength]
              [ops set i [@ 'sub [prevOps get [i - 1]]]]
              [if-else [delLength == minLength]
                [ops set i [@ 'del [prevOps get i]]]
                [ops set i [@ 'ins [ops get [i - 1]]]]]]
            [current set i minLength]]]
        [inc i]]
      [inc j]]
    [def result [@]]
    [set ops [ops get [[ops 'length] - 1]]]
    [while ops [result push [ops get 0]] [set ops [ops get 1]]]
    [return [result reverse]]]]

[diff set
  'run2
  [fn []
    [console log '\n\n]
    [console log [diff levenshtein '[] '[1]] '\n]
    [console log [diff levenshtein '[1] '[1]] '\n]
    [console log [diff levenshtein '[1] '[2]] '\n]
    [console log [diff levenshtein '[1] '[]] '\n]
    [; console log ' \n
      [diff levenshtein [' ac split ""] [' abc split ""]]]
    [; console log ' \n
      [diff levenshtein [' adc split ""] [' abc split ""]]]
    [console log
      '\n
      [diff levenshtein '[a b c c d e d f g h] '[a b c d e e e h f g]]]]]

[; "skip", "skip", "skip", "del", "sub", "sub", "skip", "sub", "skip",
  "skip", "ins"]
