[def macros [new object]]

[def onEach [new array]]

[exports set [quote transform]
  [fn [node]
    [if [[node jsType] == [quote string]] [return node]]
    [set node
      [onEach reduce
        [fn [acc obj] [[obj get [quote transform]] call null acc]]
        node]]
    [# console log [quote transform] [node get 0]]
    [if-else [macros get [node get 0]]
      [set node
        [[[macros get [node get 0]] get [quote transform]] call null node]]
      [set node [node map [exports get [quote transform]]]]]
    node]]

[exports set [quote transformList]
  [fn [list] [list map [exports get [quote transform]]]]]

[exports set [quote reverse]
  [fn [node]
    [# console log [quote reverse]]
    [if [[node jsType] == [quote string]] [return node]]
    [set node
      [[onEach reverse] reduce
        [fn [acc obj] [[obj get [quote reverse]] call null acc]]
        node]]
    [set node [exports reverseList node]]
    [set node
      [[[Object keys macros] reverse] reduce
        [fn [acc obj]
          [[[macros get obj] get [quote reverse]] call null acc]]
        node]]
    node]]

[exports set [quote reverseList]
  [fn [list] [list map [exports get [quote reverse]]]]]

[Section: Quoting
[onEach push [new object
[[quote transform] [fn [node]
    [# return node]
    [if [[node jsType] == [quote string]] [return node]]
    [# console log [quote node] node]
    [def result [new array]]
    [def i 0]
    [while [i < [node get [quote length]]]
        [if-else [[[node get i] == [quote ']] and [[i + 1] < [node get [quote length]]]] [do
              [set i [i + 1]]
              [result push [new array [quote quote] [node get i]]]]
            [result push [node get i]]]
        [set i [i + 1]]]
    [# console log [quote result] result]
    result]]
[[quote reverse] [fn [node] node]]
]]

[macros set [quote quote]
  [new object
    [[quote transform] [fn [node] node]]
    [[quote reverse] [fn [node] node]]]]
    ]

[Section: Conditionals
[macros set [quote if]
  [new object
    [[quote transform]
      [fn [node]
        [new array [quote if-else]
          [exports transform [node get 1]]
          [[quote [do]] concat [exports transformList [node slice 2]]]]]]
    [[quote reverse]
      [fn [node]
        [# console log
          [[node get 0] == [quote if-else]]
          [node get [quote length]]]
        [if
          [[[node get 0] == [quote if-else]] and
            [[node get [quote length]] == 3]]
          [# console log [[node get 2] get 0]]
          [if-else [[[node get 2] get 0] == [quote do]]
            [return
              [[new array [quote if] [node get 1]] concat
                [[node get 2] slice 1]]]
            [return [new array [quote if] [node get 1] [node get 2]]]]]
        node]]]]
        ]

[Section: comments
  [macros set [quote #]
    [new object
      [[quote transform]
        [fn [node]
          [new array [quote @annotation]
            [[quote [#]] concat [node slice 1]]]]]
      [[quote reverse]
        [fn [node]
          [if
            [[[node get 0] == [quote @annotation]] and
              [[node get [quote length]] == 2]
              [[[node get 1] get 0] == [quote #]]]
            [return [node get 1]]]
          node]]]]
  [macros set [quote Section:]
    [new object
      [[quote transform]
        [fn [node]
          [def doc [quote []]]
          [def code [quote [do]]]
          [def i 0]
          [while [[[node get i] jsType] == [quote string]]
            [doc push [node get i]]
            [set i [i + 1]]]
          [while [i < [node get [quote length]]]
            [code push [node get i]]
            [set i [i + 1]]]
          [set code [exports transform code]]
          [new array [quote @annotation] doc code]]]
      [[quote reverse]
        [fn [node]
          [if
            [[[node get 0] == [quote @annotation]] and
              [[node get [quote length]] == 3]
              [[[node get 1] get 0] == [quote Section:]]
              [[[node get 2] get 0] == [quote do]]]
            [return [[node get 1] concat [[node get 2] slice 1]]]]
          node]]]]]
[console log [quote foo] 'bar]
