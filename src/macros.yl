[def yolan [module require './yolan]]

[def macros exports]

[def onEach [@]]

[def forwardTransforms [@]]

[def reverseTransforms [@]]

[Section: Macro system
  [macros set
    'transform
    [fn [node]
      [if [[node jsType] == 'string] [return node]]
      [Section: macro transform
        [def i [forwardTransforms 'length]]
        [def done false]
        [def finish [fn [] [return [set done true]]]]
        [while [0 < i]
          [set i [i - 1]]
          [set node [[forwardTransforms get i] call null node finish]]
          [if done [return node]]]
        [set node [node map [macros 'transform]]]]
      [return node]]]
  [macros set
    'transformList
    [fn [list] [return [list map [macros 'transform]]]]]
  [macros set
    'reverse
    [fn [node]
      [if [[node jsType] == 'string] [return node]]
      [Section: macro transform
        [def i 0]
        [def done false]
        [def finish [fn [] [return [set done true]]]]
        [while [i < [reverseTransforms 'length]]
          [set node [[reverseTransforms get i] call null node finish]]
          [if done [return node]]
          [set i [i + 1]]]
        [set node [node map [macros 'reverse]]]]
      [return node]]]
  [macros set
    'reverseList
    [fn [list] [return [list map [macros 'reverse]]]]]]

[def builtins
  '[return fn do def set new-object try-catch while if-else Annotation:
    return quote]]

[Section: shorthand for get
  [forwardTransforms push
    [fn [node]
      [if
        [[[node 'length] < 2] or
          [[[[node get 1] get 0] == 'quote] fails]
          [yolan arrayHasMember builtins [node get 0]]]
        [return node]]
      [while
        [[2 < [node 'length]] and
          [[[node get 1] 'length] == 2]
          [[[node get 1] get 0] == 'quote]]
        [set node
          [[@ [@ [node get 0] 'get [node get 1]]] concat [node slice 2]]]]
      [if [[1 < [node 'length]] and [[[node get 1] get 0] == 'quote]]
        [set node [@ [node get 0] 'get [node get 1]]]]
      [return node]]]
  [reverseTransforms push
    [fn [node]
      [if [yolan arrayHasMember builtins [node get 0]] [return node]]
      [if
        [[[node 'length] == 3] and
          [[node get 1] == 'get]
          [[[node get 2] get 0] == 'quote]]
        [set node [node slice 0]]
        [node set 1 [node get 2]]
        [node pop]]
      [return node]]]]

[Section: Quoting
  [def quoteTransform
    [fn [node finish]
      [if [[[node get 0] == ''] and [[node 'length] == 2]]
        [finish call]
        [return ['[quote] concat [node get 1]]]]
      [def result [@]]
      [def i 0]
      [while [i < [node 'length]]
        [if-else [[[node get i] == ''] and [[i + 1] < [node 'length]]]
          [do [set i [i + 1]] [result push [@ 'quote [node get i]]]]
          [result push [node get i]]]
        [set i [i + 1]]]
      [return result]]]
  [forwardTransforms push quoteTransform]
  [reverseTransforms push
    [fn [node finish]
      [if [[[node 'length] == 2] and [[node get 0] == 'quote]]
        [finish call]
        [return [@ '' [node get 1]]]]
      [return node]]]
  [forwardTransforms push
    [fn [node finish]
      [if [[node get 0] == 'quote] [finish call]]
      [return node]]]]

[Section: Conditionals
  [forwardTransforms push
    [fn [node]
      [if [[node get 0] == 'if]
        [return
          [@ 'if-else
            [macros transform [node get 1]]
            ['[do] concat [macros transformList [node slice 2]]]]]]
      [return node]]]
  [reverseTransforms push
    [fn [node]
      [if [[[node get 0] == 'if-else] and [[node 'length] == 3]]
        [if-else [[[node get 2] get 0] == 'do]
          [return [[@ 'if [node get 1]] concat [[node get 2] slice 1]]]
          [return [@ 'if [node get 1] [node get 2]]]]]
      [return node]]]]

[Section: comments
  [forwardTransforms push
    [fn [node finish]
      [if [[node get 0] == ';]
        [finish call]
        [return [@ 'Annotation: node]]]
      [return node]]]
  [reverseTransforms push
    [fn [node finish]
      [if
        [[[node get 0] == 'Annotation:] and
          [[node 'length] == 2]
          [[[node get 1] get 0] == ';]]
        [finish call]
        [return [node get 1]]]
      [return node]]]
  [forwardTransforms push
    [fn [node finish]
      [if [[node get 0] == 'Section:]
        [finish call]
        [def doc '[]]
        [def code '[do]]
        [def i 0]
        [while [[[node get i] jsType] == 'string]
          [doc push [node get i]]
          [set i [i + 1]]]
        [while [i < [node 'length]]
          [code push [node get i]]
          [set i [i + 1]]]
        [set code [macros transform code]]
        [return [@ 'Annotation: doc code]]]
      [return node]]]
  [reverseTransforms push
    [fn [node]
      [if
        [[[node get 0] == 'Annotation:] and
          [[node 'length] == 3]
          [[[node get 1] get 0] == 'Section:]
          [[[node get 2] get 0] == 'do]]
        [return [[node get 1] concat [[node get 2] slice 1]]]]
      [return node]]]]

[Section: Array/object literals
  [forwardTransforms push
    [fn [node]
      [if [[node get 0] == '@]
        [return ['[new array] concat [node slice 1]]]]
      [return node]]]
  [reverseTransforms push
    [fn [node]
      [if [[[node get 0] == 'new] and [[node get 1] == 'array]]
        [return ['[@] concat [node slice 2]]]]
      [return node]]]
  [forwardTransforms push
    [fn [node]
      [if [[node get 0] == '#]
        [def result '[new-object]]
        [[node slice 1] forEach
          [fn [elem]
            [set elem [quoteTransform call null elem [fn []]]]
            [result push [elem get 0]]
            [result push [elem get 1]]]]
        [return result]]
      [return node]]]
  [reverseTransforms push
    [fn [node finish]
      [if [[node get 0] == 'new-object]
        [def result '[#]]
        [def i 1]
        [while [i < [node 'length]]
          [result push [@ [node get i] [node get [i + 1]]]]
          [set i [i + 2]]]
        [return result]]
      [return node]]]]

[console log [# ['a 'b] [3 4]]]
