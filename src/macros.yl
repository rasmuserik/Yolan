[def macros [new object]]

[def onEach [new array]]

[def forwardTransforms [new array]]

[def reverseTransforms [new array]]

[Section: Macro system
  [exports set
    'transform
    [fn [node]
      [if [[node jsType] == 'string] [return node]]
      [Section: macro transform
        [def i [forwardTransforms get 'length]]
        [def done false]
        [def finish [fn [] [set done true]]]
        [while [0 < i]
          [set i [i - 1]]
          [set node [[forwardTransforms get i] call null node finish]]
          [if done [return node]]]
        [set node [node map [exports get ' transform]]]]
      node]]
  [exports set
    'transformList
    [fn [list] [list map [exports get 'transform]]]]
  [exports set
    'reverse
    [fn [node]
      [if [[node jsType] == 'string] [return node]]
      [Section: macro transform
        [def i 0]
        [def done false]
        [def finish [fn [] [set done true]]]
        [while [i < [reverseTransforms get 'length]]
          [set node [[reverseTransforms get i] call null node finish]]
          [if done [return node]]
          [set i [i + 1]]]
        [set node [node map [exports get ' transform]]]]
      node]]
  [exports set 'reverseList [fn [list] [list map [exports get 'reverse]]]]]

[Section: Quoting
  [forwardTransforms push
    [fn [node finish]
      [if [[[node get 0] == ''] and [[node get 'length] == 2]]
        [finish call]
        [return ['[quote] concat [node get 1]]]]
      [def result [new array]]
      [def i 0]
      [while [i < [node get 'length]]
        [if-else [[[node get i] == ''] and [[i + 1] < [node get 'length]]]
          [do [set i [i + 1]]
            [result push [new array 'quote [node get i]]]]
          [result push [node get i]]]
        [set i [i + 1]]]
      result]]
  [reverseTransforms push
    [fn [node]
      [if [[[node get 'length] == 2] and [[node get 0] == 'quote]]
        [return [new array '' [node get 1]]]]
      node]]
  [forwardTransforms push
    [fn [node finish]
      [if [[node get 0] == 'quote]
        [finish call]]
      node]]]

[; Section: shorthand for get
  [# Commented out because \[...\'... \] actually may happen, ie:
    \[return\[\'...\]\] and \[new object \[...\'...\]]
  [onEach push
    [new object
      [' transform
        [fn [node]
          [while
            [[2 < [node get ' length]] and
              [[[node get 1] get ' length] == 2]
              [[[node get 1] get 0] == ' quote]]
            [set node
              [[new array [new array [node get 0] ' get [node get 1]]]
                concat
                [node slice 2]]]]
          [if
            [[1 < [node get ' length]] and
              [[[node get 1] get 0] == ' quote]]
            [set node [new array [node get 0] ' get [node get 1]]]]
          node]]
      [' reverse [fn [node] node]]]]]

[Section: Conditionals
  [forwardTransforms push
    [fn [node]
      [if [[node get 0] == 'if]
        [return
          [new array
            'if-else
            [exports transform [node get 1]]
            ['[do] concat [exports transformList [node slice 2]]]]]]
      node]]
  [reverseTransforms push
    [fn [node]
      [if [[[node get 0] == 'if-else] and [[node get 'length] == 3]]
        [if-else [[[node get 2] get 0] == 'do]
          [return
            [[new array 'if [node get 1]] concat [[node get 2] slice 1]]]
          [return [new array 'if [node get 1] [node get 2]]]]]
      node]]]

[Section: comments
  [forwardTransforms push
    [fn [node finish]
      [if [[node get 0] == ';]
        [finish call]
        [return [new array 'Annotation: node]]]
      node]]
  [reverseTransforms push
    [fn [node finish]
      [if
        [[[node get 0] == 'Annotation:] and
          [[node get 'length] == 2]
          [[[node get 1] get 0] == ';]]
        [finish call]
        [return [node get 1]]]
      node]]
  [forwardTransforms push
    [fn [node finish]
      [if [[node get 0] == 'Section:]
        [finish call]
        [def doc '[]]
        [def code '[do]]
        [def i 0]
        [while [[[node get i] jsType] == 'string]
          [doc push [node get i]]
          [set i [i + 1]]]
        [while [i < [node get 'length]]
          [code push [node get i]]
          [set i [i + 1]]]
        [set code [exports transform code]]
        [return [new array 'Annotation: doc code]]]
      node]]
  [reverseTransforms push
    [fn [node]
      [if
        [[[node get 0] == 'Annotation:] and
          [[node get 'length] == 3]
          [[[node get 1] get 0] == 'Section:]
          [[[node get 2] get 0] == 'do]]
        [return [[node get 1] concat [[node get 2] slice 1]]]]
      node]]]
