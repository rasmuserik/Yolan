[Section: Tokenization
  [exports set
    'tokenize
    [fn [str]
      [def result [@]]
      [def i 0]
      [def tokeniser [new object]]
      [def c [str get 0]]
      [def nextc [fn [] [set i [i + 1]] [set c [str get i]] [return c]]]
      [def isWs
        [fn [] [return [[c == '\ ] or [c == '\n] [c == '\r] [c == '\t]]]]]
      [def isPrefix
        [fn [] [return [[c == ''] or [c == ''] [c == ''] [c == '']]]]]
      [def isBracket [fn [] [return [[c == '\[] or [c == '\]]]]]]
      [while c
        [while [isWs call] [nextc call]]
        [if-else [c == '\[]
          [do [result push lbracket] [nextc call]]
          [if-else [c == '\]]
            [do [result push rbracket] [nextc call]]
            [if-else [isPrefix call]
              [do [result push c] [nextc call]]
              [do [def symb ""]
                [while [c and [[isWs call] fails] [[isBracket call] fails]]
                  [if [c == '\\]
                    [nextc call]
                    [if
                      [[[isWs call] or [isBracket call] [isPrefix call]]
                        fails]
                      [set symb [symb + '\\]]]]
                  [if [c == '"] [set symb [symb + '\\]]]
                  [set symb [symb + c]]
                  [nextc call]]
                [result push symb]]]]]]
      [if [[[result get [[result 'length] - 1]] 'length] == 0]
        [result pop]]
      [return result]]]]

[Section: Special tokens
  [def quote [new object ['quote true]]]
  [def lbracket [new object ['lbracket true]]]
  [def rbracket [new object ['rbracket true]]]]

[Section: Parsing
  [def addQuotes
    [fn [list]
      [def i 0]
      [def result [@]]
      [while [i < [list 'length]]
        [def elem [list get i]]
        [if [elem == quote]
          [set i [i + 1]]
          [set elem [@ 'quote [list get i]]]]
        [result push elem]
        [set i [i + 1]]]
      [return result]]]
  [exports set
    'parse
    [fn [tokens]
      [set tokens [tokens reverse]]
      [def stack [@]]
      [def current [@ 'do]]
      [while [tokens 'length]
        [def token [tokens pop]]
        [if-else [token == lbracket]
          [do [stack push current] [set current [@]]]
          [if-else [token == rbracket]
            [do [def t current] [set current [stack pop]] [current push t]]
            [current push [JSON parse ['" + token '"]]]]]]
      [return current]]]]

[Section: PrettyPrinting
  [Section: Prettyprint configuration
    [def screenWidth 78]
    [def indentStep 2]]
  [Section: Utility for creating line-prepended whitespace
    [exports set
      'nspace
      [fn [n]
        [def result [@]]
        [while [0 < n] [set n [n - 1]] [result push '\ ]]
        [return [result join ""]]]]]
  [def indent 0]
  [def escapeRegEx [RegExp call RegExp '\[\'\ \\\[\\\]\] 'g]]
  [def escapeRegEx2 [RegExp call RegExp '\\\\" 'g]]
  [exports set
    'prettyprint
    [fn [ast]
      [Section: Handle strings, empty lists and quotes
        [if [[ast jsType] == 'string]
          [if [ast == ''] [return '']]
          [return
            [[[[JSON stringify ast] slice 1 -1] replace escapeRegEx
                [fn [s] [return ['\\ + s]]]]
              replace escapeRegEx2
              '"]]]
        [if [0 == [ast 'length]] [return '\[\]]]
        [if [[2 == [ast 'length]] and [[ast get 0] == '']]
          [return ['' + [exports prettyprint [ast get 1]]]]]]
      [set indent [indent + indentStep]]
      [def lineStart '\[]
      [def lineEnd '\]]
      [def pos [indent + [lineStart 'length]]]
      [def strs [ast map [exports 'prettyprint]]]
      [Section: Single line
        [if [[pos + [[strs join] 'length] 1] < screenWidth]
          [set indent [indent - indentStep]]
          [return [lineStart + [strs join '\ ] lineEnd]]]]
      [def space ['\n + [exports nspace indent]]]
      [def result [@]]
      [result push lineStart]
      [result push [strs get 0]]
      [set pos [pos + [[strs get 0] 'length] 1]]
      [def forceNewLine false]
      [def currentIsString true]
      [def i 1]
      [while [i < [strs 'length]]
        [def prevIsString currentIsString]
        [set currentIsString [[[ast get i] jsType] == 'string]]
        [set forceNewLine false]
        [if [[prevIsString fails] or [currentIsString fails]]
          [set forceNewLine true]]
        [if [i < 2] [set forceNewLine false]]
        [def prevIsString currentIsString]
        [result push '\ ]
        [if [forceNewLine or [screenWidth < [pos + [[strs get i] 'length]]]]
          [result pop]
          [result push space]
          [set pos indent]]
        [result push [strs get i]]
        [set pos [pos + [[strs get i] 'length] 1]]
        [set i [i + 1]]]
      [result push lineEnd]
      [set indent [indent - indentStep]]
      [return [result join ""]]]]]
