[Section:  Tokenization 
  [exports  set  ' tokenize 
    [fn  [str] 
      [def result [new array]] 
      [def i 0] 
      [def tokeniser [new object]] 
      [def c [str get 0]] 
      [def nextc [fn [] [set i [i + 1]] [set c [str get i]] c]] 
      [def isWs [fn [] [[c == '\ ] or [c == '\n] [c == '\r] [c == '\t]]]] 
      [def isPrefix [fn [] [[c == ''] or [c == ''] [c == ''] [c == '']]]] 
      [def isBracket [fn [] [[c == '\[] or [c == '\]]]]] 
      [while  c 
        [while [isWs call] [nextc call]] 
        [if-else  [c == '\[] 
          [do [result push lbracket] [nextc call]] 
          [if-else  [c == '\]] 
            [do [result push rbracket] [nextc call]] 
            [if-else  [isPrefix call] 
              [do [result push c] [nextc call]] 
              [do  [def symb ""] 
                [while  [c and [[isWs call] fails] [[isBracket call] fails]] 
                  [if  [c == '\\] 
                    [nextc call] 
                    [if 
                      [[[isWs call] or [isBracket call] [isPrefix call]] 
                        fails] 
                      [set symb [symb + '\\]]]] 
                  [if [c == '"] [set symb [symb + '\\]]] 
                  [set symb [symb + c]] 
                  [nextc call]] 
                [result push symb]]]]]] 
      [if  [[[result get [[result get 'length] - 1]] get 'length] == 0] 
        [result pop]] 
      result]]]

[Section:  Special  tokens 
  [def quote [new object ['quote true]]] 
  [def lbracket [new object ['lbracket true]]] 
  [def rbracket [new object ['rbracket true]]]]

[Section:  Parsing 
  [def  addQuotes 
    [fn  [list] 
      [def i 0] 
      [def result [new array]] 
      [while  [i < [list get 'length]] 
        [def elem [list get i]] 
        [if  [elem == quote] 
          [set i [i + 1]] 
          [set elem [new array 'quote [list get i]]]] 
        [result push elem] 
        [set i [i + 1]]] 
      result]] 
  [exports  set  ' parse 
    [fn  [tokens] 
      [set tokens [tokens reverse]] 
      [def stack [new array]] 
      [def current [new array 'do]] 
      [while  [tokens get 'length] 
        [def token [tokens pop]] 
        [if-else  [token == lbracket] 
          [do [stack push current] [set current [new array]]] 
          [if-else  [token == rbracket] 
            [do  [def t current] 
              [set current [stack pop]] 
              [current push t]] 
            [current push [JSON parse ['" + token '"]]]]]] 
      current]]]

[Section:  PrettyPrinting 
  [Section:  Prettyprint  configuration 
    [def screenWidth 78] 
    [def indentStep 2]] 
  [Section:  Utility  for  creating  line-prepended  whitespace 
    [exports  set  ' nspace 
      [fn  [n] 
        [def result [new array]] 
        [while [0 < n] [set n [n - 1]] [result push '\ ]] 
        [result join ""]]]] 
  [def indent 0] 
  [def escapeRegEx [RegExp call RegExp '\[\'\ \\\[\\\]\] 'g]] 
  [def escapeRegEx2 [RegExp call RegExp '\\\\" 'g]] 
  [exports  set  ' prettyprint 
    [fn  [ast] 
      [if  [[ast jsType] == 'string] 
        [if [ast == ''] [return '']] 
        [return 
          [[[[JSON stringify ast] slice 1 -1]  replace  escapeRegEx 
              [fn [s] ['\\ + s]]] 
            replace  escapeRegEx2  ' "]]] 
      [Section:  Handle  empty  lists 
        [if [0 == [ast get 'length]] [return '\[\]]]] 
      [set indent [indent + indentStep]] 
      [def pos indent] 
      [set strs [ast map [exports get 'prettyprint]]] 
      [def i 0] 
      [while  [i < [[strs get 'length] - 1]] 
        [if  [[[strs get i] == ''] fails] 
          [strs set i [[strs get i] + '\ ]]] 
        [set i [i + 1]]] 
      [if  [[pos + [[strs join] get 'length] 1] < screenWidth] 
        [set indent [indent - indentStep]] 
        [return ['\[ + [strs join ""] '\]]]] 
      [def space ['\n + [exports nspace indent]]] 
      [def result [new array]] 
      [result push '\[] 
      [result push [strs get 0]] 
      [set pos [pos + [[strs get 0] get 'length] 1]] 
      [def i 1] 
      [def forceNewLine false] 
      [def currentIsString true] 
      [while  [i < [ast get 'length]] 
        [def prevIsString currentIsString] 
        [set  currentIsString 
          [[[[ast get i] jsType] == 'string]  or 
            ['quote == [[ast get i] get 0]]]] 
        [set forceNewLine false] 
        [if  [[prevIsString fails] or [currentIsString fails]] 
          [set forceNewLine true]] 
        [if [i < 2] [set forceNewLine false]] 
        [def prevIsString currentIsString] 
        [result push '\ ] 
        [if 
          [forceNewLine  or 
            [screenWidth < [pos + [[strs get i] get 'length]]]] 
          [result pop] 
          [result push space] 
          [set pos indent]] 
        [result push [strs get i]] 
        [set pos [pos + [[strs get i] get 'length] 1]] 
        [set i [i + 1]]] 
      [result push '\]] 
      [set indent [indent - indentStep]] 
      [result join ""]]]]
