[Section: Tokenization
  [exports set [quote tokenize]
    [fn [str]
      [def result [new array]]
      [def i 0]
      [def tokeniser [new object]]
      [def c [str get 0]]
      [def nextc [fn [] [set i [i + 1]] [set c [str get i]] c]]
      [def isWs
        [fn []
          [[c == [quote \ ]] or
            [c == [quote \n]]
            [c == [quote \r]]
            [c == [quote \t]]]]]
      [def isPrefix
        [fn []
          [[c == [quote \']] or
            [c == [quote \']]
            [c == [quote \']]
            [c == [quote \']]]]]
      [def isBracket [fn [] [[c == [quote \[]] or [c == [quote \]]]]]]
      [while c
        [while [isWs call] [nextc call]]
        [if-else [c == [quote \[]]
          [do [result push lbracket] [nextc call]]
          [if-else [c == [quote \]]]
            [do [result push rbracket] [nextc call]]
            [if-else [isPrefix call]
              [do [result push c] [nextc call]]
              [do [def symb ""]
                [while [c and [[isWs call] fails] [[isBracket call] fails]]
                  [if [c == [quote \\]]
                    [nextc call]
                    [if
                      [[[isWs call] or [isBracket call] [isPrefix call]]
                        fails]
                      [set symb [symb + [quote \\]]]]]
                  [if [c == [quote "]] [set symb [symb + [quote \\]]]]
                  [set symb [symb + c]]
                  [nextc call]]
                [result push symb]]]]]]
      [if
        [[[result get [[result get [quote length]] - 1]] get [quote length]]
          == 0]
        [result pop]]
      result]]]

[Section: Special tokens
  [def quote [new object [[quote quote] true]]]
  [def lbracket [new object [[quote lbracket] true]]]
  [def rbracket [new object [[quote rbracket] true]]]]

[Section: Parsing
  [def addQuotes
    [fn [list]
      [def i 0]
      [def result [new array]]
      [while [i < [list get [quote length]]]
        [def elem [list get i]]
        [if [elem == quote]
          [set i [i + 1]]
          [set elem [new array [quote quote] [list get i]]]]
        [result push elem]
        [set i [i + 1]]]
      result]]
  [exports set [quote parse]
    [fn [tokens]
      [set tokens [tokens reverse]]
      [def stack [new array]]
      [def current [new array [quote do]]]
      [while [tokens get [quote length]]
        [def token [tokens pop]]
        [if-else [token == lbracket]
          [do [stack push current] [set current [new array]]]
          [if-else [token == rbracket]
            [do [def t current]
              [set current [stack pop]]
              [current push t]]
            [current push [JSON parse [[quote "] + token [quote "]]]]]]]
      current]]]

[Section: PrettyPrinting
  [exports set [quote nspace]
    [fn [n]
      [def result [new array]]
      [while [0 < n] [set n [n - 1]] [result push [quote \ ]]]
      [result join ""]]]
  [def indent 0]
  [def screenWidth 78]
  [def indentStep 2]
  [def escapeRegEx [RegExp call RegExp [quote \[\'\ \\\[\\\]\]] [quote g]]]
  [def escapeRegEx2 [RegExp call RegExp [quote \\\\"] [quote g]]]
  [exports set [quote prettyprint]
    [fn [ast]
      [if [[ast jsType] == [quote string]]
        [return
          [[[[JSON stringify ast] slice 1 -1] replace escapeRegEx
              [fn [s] [[quote \\] + s]]]
            replace escapeRegEx2 [quote "]]]]
      [if [0 == [ast get [quote length]]] [return [quote \[\]]]]
      [set indent [indent + indentStep]]
      [def pos indent]
      [set strs [ast map [exports get [quote prettyprint]]]]
      [if [[pos + [[strs join] get [quote length]] 1] < screenWidth]
        [set indent [indent - indentStep]]
        [return [[quote \[] + [strs join [quote \ ]] [quote \]]]]]
      [def space [[quote \n] + [exports nspace indent]]]
      [def result [new array]]
      [result push [quote \[]]
      [result push [strs get 0]]
      [set pos [pos + [[strs get 0] get [quote length]] 1]]
      [def i 1]
      [def forceNewLine false]
      [def currentIsString true]
      [while [i < [ast get [quote length]]]
        [def prevIsString currentIsString]
        [set currentIsString
          [[[[ast get i] jsType] == [quote string]] or
            [[quote quote] == [[ast get i] get 0]]]]
        [set forceNewLine false]
        [if [[prevIsString fails] or [currentIsString fails]]
          [set forceNewLine true]]
        [if [i < 2] [set forceNewLine false]]
        [def prevIsString currentIsString]
        [result push [quote \ ]]
        [if
          [forceNewLine or
            [screenWidth < [pos + [[strs get i] get [quote length]]]]]
          [result pop]
          [result push space]
          [set pos indent]]
        [result push [strs get i]]
        [set pos [pos + [[strs get i] get [quote length]] 1]]
        [set i [i + 1]]]
      [result push [quote \]]]
      [set indent [indent - indentStep]]
      [result join ""]]]]
